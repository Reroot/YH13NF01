import java.util.*;

// 15. 3Sum
// Medium

// Given an array nums of n integers, are there 
// elements a, b, c in nums such that a + b + c = 0? Find 
// all unique triplets in the array which gives the sum of zero.

// // Note:

// The solution set must not contain duplicate triplets.

// Example:

// Given array nums = [-1, 0, 1, 2, -1, -4],

// A solution set is:
// [
//   [-1, 0, 1],
//   [-1, -1, 2]
// ]
//Brute Force
// A simple Java program to find three elements 
// whose sum is equal to zero 
class num{ 
    // Prints all triplets in arr[] with 0 sum 
    static void findTriplets(int[] arr, int n) 
    { 
        boolean found = true; 
        for (int i=0; i<n-2; i++) 
        { 
            for (int j=i+1; j<n-1; j++) 
            { 
                for (int k=j+1; k<n; k++) 
                { 
                    if (arr[i]+arr[j]+arr[k] == 0) 
                    { 
                        System.out.print(arr[i]); 
                        System.out.print(" "); 
                        System.out.print(arr[j]); 
                        System.out.print(" "); 
                        System.out.print(arr[k]); 
                        System.out.print("\n"); 
                        found = true; 
                    } 
                } 
            } 
        } 
    
        // If no triplet with 0 sum found in array 
        if (found == false) 
            System.out.println(" not exist "); 
    
    } 
    
    // Driver code 
    public static void main(String[] args) 
    { 
        int arr[] = {0, -1, 2, -3, 1}; 
        int n =arr.length; 
        findTriplets(arr, n); 
    
    } 
    } 
    //This code is contributed by 
    //Smitha Dinesh Semwal 

// Method 2 (Hashing : O(n2)) My org solution
//     We iterate through every element. For every element arr[i], we find a pair with sum “-arr[i]”. This problem reduces to pairs sum and can be solved in O(n) time using hashing.
    
//     Run a loop from i=0 to n-2
//       Create an empty hash table
//       Run inner loop from j=i+1 to n-1
//           If -(arr[i] + arr[j]) is present in hash table
//              print arr[i], arr[j] and -(arr[i]+arr[j])
//           Else
//              Insert arr[j] in hash table.
// Java program to find triplets in a given 
// array whose sum is zero 
import java.util.*; 

class GFG 
{ 

	// function to print triplets with 0 sum 
	static void findTriplets(int arr[], int n) 
	{ 
		boolean found = false; 

		for (int i = 0; i < n - 1; i++) 
		{ 
			// Find all pairs with sum equals to 
			// "-arr[i]" 
			HashSet<Integer> s = new HashSet<Integer>(); 
			for (int j = i + 1; j < n; j++) 
			{ 
				int x = -(arr[i] + arr[j]); 
				if (s.contains(x)) 
				{ 
					System.out.printf("%d %d %d\n", x, arr[i], arr[j]); 
					found = true; 
				} 
				else
				{ 
					s.add(arr[j]); 
				} 
			} 
		} 

		if (found == false) 
		{ 
			System.out.printf(" No Triplet Found\n"); 
		} 
	} 

	// Driver code 
	public static void main(String[] args) 
	{ 
		int arr[] = {0, -1, 2, -3, 1}; 
		int n = arr.length; 
		findTriplets(arr, n); 
	} 
} 

// This code contributed by Rajput-Ji 


//Correct Similar solution
class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
		Arrays.sort(nums);
		List<List<Integer>> r=new ArrayList<>();
		HashMap<Integer,Integer> index=new HashMap<>();
		for(int i=0;i<nums.length;i++)
			index.put(nums[i], i);
		for(int i=0;i<nums.length-2;i++){
			for(int j=i+1;j<nums.length-1;j++){
				int target=0-nums[i]-nums[j];
				if(index.containsKey(target) && index.get(target)>j){
					r.add(Arrays.asList(nums[i], nums[j], target));
                    j=index.get(nums[j]);
                    //J
                    // Yes, that will remove the repetition as the nums are being sorted first.
                    // And if we look closely the HashMap will have the lastest index of a given element.

                    // Example:
                    // 0 1 2 2 2 2 3 3 3 3
                    // HashMap:
                    // 0 -> 0
                    // 1 -> 1
                    // 2 -> 5
                    // 3 -> 9

                    // So when the 2 is initially reached i = 2, but when i = HashMap(2), i becomes 5 hence skipping all the repetition.
				}
				i=index.get(nums[i]);
			}
		}
		return r;
    }
}
//Binary Search 
// Java program to find triplets in a given 
// array whose sum is zero 
// Method 3 (Sorting : O(n2))
// The above method requires extra space. We can solve in O(1) extra space. The idea is based on method 2 of this post.

// 1. Sort all element of array
// 2. Run loop from i=0 to n-2.
//      Initialize two index variables l=i+1 and r=n-1
// 4. while (l < r) 
//      Check sum of arr[i], arr[l], arr[r] is
//      zero or not if sum is zero then print the
//      triplet and do l++ and r--.
// 5. If sum is less than zero then l++
// 6. If sum is greater than zero then r--
// 7. If not exist in array then print not found.
//*
public List<List<Integer>> threeSum(int[] nums) {
    Set<List<Integer>> res  = new HashSet<>();
    if(nums.length==0) return new ArrayList<>(res);
    Arrays.sort(nums);
    for(int i=0; i<nums.length-2;i++){
        int j =i+1;
       int  k = nums.length-1;
        while(j<k){
            int sum = nums[i]+nums[j]+nums[k];
            if(sum==0)res.add(Arrays.asList(nums[i],nums[j++],nums[k--]));
            else if ( sum >0) k--;
            else if (sum<0) j++;
        }

    }
    return new ArrayList<>(res);
}


import java.util.Arrays; 
import java.io.*; 

class GFG { 
	// function to print triplets with 0 sum 
static void findTriplets(int arr[], int n) 
{ 
	boolean found = false; 

	// sort array elements 
	Arrays.sort(arr); 

	for (int i=0; i<n-1; i++) 
	{ 
		// initialize left and right 
		int l = i + 1; 
		int r = n - 1; 
		int x = arr[i]; 
		while (l < r) 
		{ 
			if (x + arr[l] + arr[r] == 0) 
			{ 
				// print elements if it's sum is zero 
					System.out.print(x + " "); 
					System.out.print(arr[l]+ " "); 
					System.out.println(arr[r]+ " "); 
	
				l++; 
				r--; 
				found = true; 
			} 

			// If sum of three elements is less 
			// than zero then increment in left 
			else if (x + arr[l] + arr[r] < 0) 
				l++; 

			// if sum is greater than zero than 
			// decrement in right side 
			else
				r--; 
		} 
	} 

	if (found == false) 
			System.out.println(" No Triplet Found"); 
} 

// Driven source 
	public static void main (String[] args) { 

	int arr[] = {0, -1, 2, -3, 1}; 
	int n =arr.length; 
	findTriplets(arr, n); 
	} 
//This code is contributed by Tushil..	 
} 



//Try 1 no help, Try, no looking, right concept, good execution
class threeSum {
    public List<List<Integer>> threeSum(int[] nums) {
        //we can use a map to figure out a comp
        // the target is 0, so we know thaat if we find two
        // case 1: we find two numbers 1+2 + c = 0?
        // we can look for c  = 0 - 1 - 2, so we need to look for a
        //negative 3, we can do this with a hash map
        // we we would have 2 for loops, iterating an add as i and j
        // while also looking through a hashmap for the comp that
        //gives us a target.\\
        Hashmap<Integer, Integer> map = HashMap<>();
        List<Integer> ls = ArrayList<Integer>();
        for(int i = 0;i<nums.length;i++) {
            for(int j = i + 1;j<nums.length;j++) {
                if(map.containsKey(-1*(nums[i] + nums[j]))) {
                    //so if we find a idtendital one for our additions
                    //we know that a negative substract would make 0
                    //unless all the numbers are 0 we need to find negatives
                    // a + b + c = 0, we need to find our neg
                    ls.add(nums[i]);
                    ls.add(nums[j]);
                    ls.add(map.getKey(i));
                } else {
                    //add to the map, to later find our see
                    map.put(nums[i], i);
                }
            }
         }
         return null;
    }
}


// # A simple Python 3 program 
// # to find three elements whose 
// # sum is equal to zero 

// # Prints all triplets in 
// # arr[] with 0 sum 
// def findTriplets(arr, n): 

// 	found = True
// 	for i in range(0, n-2): 
	
// 		for j in range(i+1, n-1): 
		
// 			for k in range(j+1, n): 
			
// 				if (arr[i] + arr[j] + arr[k] == 0): 
// 					print(arr[i], arr[j], arr[k]) 
// 					found = True
	
			
// 	# If no triplet with 0 sum 
// 	# found in array 
// 	if (found == False): 
// 		print(" not exist ") 

// # Driver code 
// arr = [0, -1, 2, -3, 1] 
// n = len(arr) 
// findTriplets(arr, n) 

// # This code is contributed by Smitha Dinesh Semwal	 
